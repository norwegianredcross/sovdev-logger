# file: .devcontainer/Dockerfile.base
# Description: Base install for all devcontainers with cross-platform PowerShell support

# Use the official Python devcontainer image as the base
FROM mcr.microsoft.com/devcontainers/python:1-3.11-bookworm

# Switch to vscode user for all operations
USER vscode

# =============================================================================
# BUILD ARGUMENTS - Environment variables from host system
# =============================================================================
# Mac environment variables
ARG DEV_MAC_LOGNAME
ARG DEV_MAC_USER

# Windows environment variables
ARG DEV_WIN_USERDNSDOMAIN
ARG DEV_WIN_USERDOMAIN
ARG DEV_WIN_USERDOMAIN_ROAMINGPROFILE
ARG DEV_WIN_USERNAME
ARG DEV_WIN_COMPUTERNAME
ARG DEV_WIN_OS

# Set environment variables in container
ENV DEV_MAC_LOGNAME=$DEV_MAC_LOGNAME
ENV DEV_MAC_USER=$DEV_MAC_USER
ENV DEV_WIN_USERDNSDOMAIN=$DEV_WIN_USERDNSDOMAIN
ENV DEV_WIN_USERDOMAIN=$DEV_WIN_USERDOMAIN
ENV DEV_WIN_USERDOMAIN_ROAMINGPROFILE=$DEV_WIN_USERDOMAIN_ROAMINGPROFILE
ENV DEV_WIN_USERNAME=$DEV_WIN_USERNAME
ENV DEV_WIN_COMPUTERNAME=$DEV_WIN_COMPUTERNAME
ENV DEV_WIN_OS=$DEV_WIN_OS

# Set environment variable to avoid interactive prompts during apt install
ENV DEBIAN_FRONTEND=noninteractive

# =============================================================================
# SYSTEM PACKAGES INSTALLATION
# =============================================================================
# Install essential system packages
# - libcap2-bin: Allows setting file capabilities, helpful for network or permission management tasks
# - iputils-ping: Provides the `ping` command, useful for network connectivity testing
# - iproute2: Includes networking utilities like `ip` for managing network interfaces and routing
# - traceroute: Used to trace the route packets take to a network host, useful for network diagnostics
# - jc: Converts command-line tool output to JSON for easier parsing
# - xdg-utils: Contains utilities like `xdg-open` to open URLs or files, enabling users to click links in the container
# - Standard utilities: git, curl, wget, zip, unzip for general development tasks

RUN sudo apt-get update && \
    sudo apt-get install -y --no-install-recommends \
        libcap2-bin \
        iputils-ping \
        iproute2 \
        traceroute \
        jc \
        xdg-utils \
        git \
        curl \
        wget \
        zip \
        unzip && \
    sudo apt-get clean && \
    sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# =============================================================================
# NODE.JS INSTALLATION AND CONFIGURATION
# =============================================================================
# Install Node.js LTS and configure npm for the vscode user
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - && \
    sudo apt-get install -y nodejs && \
    sudo apt-get clean && \
    sudo rm -rf /var/lib/apt/lists/* && \
    # Create the complete directory structure for npm global packages
    sudo mkdir -p /usr/local/lib/node_modules && \
    sudo mkdir -p /usr/local/bin && \
    # Set proper permissions for vscode user
    sudo chown -R vscode:vscode /usr/local/lib/node_modules && \
    sudo chown -R vscode:vscode /usr/local/bin && \
    # Configure npm to use the correct prefix
    npm config set prefix '/usr/local' && \
    # Add npm global bin to PATH for future sessions
    echo 'export PATH=/usr/local/bin:$PATH' >> ~/.bashrc

# Add the npm global bin to PATH for current build process
ENV PATH=/usr/local/bin:$PATH

# =============================================================================
# AZURE CLI INSTALLATION
# =============================================================================
# Install Azure CLI using the official Microsoft installation script
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

# =============================================================================
# POWERSHELL INSTALLATION - CROSS-PLATFORM SOLUTION
# =============================================================================
# Install PowerShell using direct download method to avoid repository and GPG issues
# This solution works on both Mac (ARM64) and Windows (AMD64) host systems
RUN cd /tmp && \
    # Get target platform information
    TARGETPLATFORM=$(uname -m) && \
    echo "Target platform: $TARGETPLATFORM" && \
    \
    # Set PowerShell version (latest stable release)
    PS_VERSION="7.5.2" && \
    \
    # Determine architecture-specific download URL
    case "$TARGETPLATFORM" in \
        "x86_64"|"amd64") \
            PS_ARCH="x64" && \
            PS_PACKAGE_URL="https://github.com/PowerShell/PowerShell/releases/download/v${PS_VERSION}/powershell-${PS_VERSION}-linux-x64.tar.gz" ;; \
        "aarch64"|"arm64") \
            PS_ARCH="arm64" && \
            PS_PACKAGE_URL="https://github.com/PowerShell/PowerShell/releases/download/v${PS_VERSION}/powershell-${PS_VERSION}-linux-arm64.tar.gz" ;; \
        "armv7l"|"arm") \
            PS_ARCH="arm32" && \
            PS_PACKAGE_URL="https://github.com/PowerShell/PowerShell/releases/download/v${PS_VERSION}/powershell-${PS_VERSION}-linux-arm32.tar.gz" ;; \
        *) \
            echo "Unsupported architecture: $TARGETPLATFORM" && \
            exit 1 ;; \
    esac && \
    \
    echo "Installing PowerShell $PS_VERSION for $PS_ARCH architecture" && \
    echo "Download URL: $PS_PACKAGE_URL" && \
    \
    # Download PowerShell tarball
    curl -L -o powershell.tar.gz "$PS_PACKAGE_URL" && \
    \
    # Create PowerShell installation directory
    sudo mkdir -p /opt/microsoft/powershell/7 && \
    \
    # Extract PowerShell to installation directory
    sudo tar zxf powershell.tar.gz -C /opt/microsoft/powershell/7 && \
    \
    # Set executable permissions
    sudo chmod +x /opt/microsoft/powershell/7/pwsh && \
    \
    # Create symbolic links for maximum compatibility
    # Link to /usr/local/bin (preferred for user-installed software)
    sudo ln -sf /opt/microsoft/powershell/7/pwsh /usr/local/bin/pwsh && \
    # Link to /usr/bin (system-wide availability)
    sudo ln -sf /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh && \
    \
    # Clean up downloaded files
    rm powershell.tar.gz && \
    \
    # Verify installation and display version
    echo "PowerShell installation completed. Version:" && \
    pwsh --version

# =============================================================================
# DEVCONTAINER SCRIPT PATH CONFIGURATION
# =============================================================================
# Add .devcontainer directory to PATH to enable easy access to development scripts
# This allows users to run 'dev-setup' from anywhere in the container instead of
# having to type '.devcontainer/dev-setup.sh' or remember the full path.
#
# Scripts available via this PATH addition:
# - dev-setup: Interactive development environment setup and tool selection
# - Any other executable scripts placed in .devcontainer/ directory
#
# Usage example: User can simply type 'dev-setup' from any directory
ENV PATH="/workspace/.devcontainer:$PATH"

# =============================================================================
# FINAL CLEANUP AND ENVIRONMENT RESET
# =============================================================================
# Reset DEBIAN_FRONTEND to allow interactive prompts in the running container
ENV DEBIAN_FRONTEND=

# =============================================================================
# VERIFICATION AND SUMMARY
# =============================================================================
# The following tools are now available in this container:
# - Python 3.11 (from base image)
# - Node.js LTS with npm (configured for vscode user)
# - Azure CLI (latest version)
# - PowerShell 7.5.2 (cross-platform installation)
# - Essential networking and development tools
# - All environment variables from host system (Mac/Windows)
#
# PowerShell can be accessed via:
# - pwsh (recommended)
# - /opt/microsoft/powershell/7/pwsh (full path)
#
# This Dockerfile works on:
# - Mac (Intel and Apple Silicon)
# - Windows (Intel/AMD)
# - Linux (x64, ARM64, ARM32)
# =============================================================================